import atexit
import logging
import os
import shutil
import tempfile
import time
import uuid

from PIL import Image, UnidentifiedImageError
from flask import Flask, request, render_template, send_file, abort
from werkzeug.utils import secure_filename

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO, format="%(asctime)s - %(levelname)s - %(message)s")

# Flask –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
app = Flask(__name__)

# –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã
SUPPORTED_FORMATS = {".jpg", ".jpeg", ".png", ".bmp", ".tiff", ".heic", ".webp"}
MAX_PIXELS = 50_000_000  # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –Ω–∞ —Ä–∞–∑–º–µ—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è (50 –º–ª–Ω –ø–∏–∫—Å–µ–ª–µ–π)

# –í—Ä–µ–º–µ–Ω–Ω–∞—è –ø–∞–ø–∫–∞ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤
temp_dir = tempfile.TemporaryDirectory()
TEMP_FOLDER = temp_dir.name


# –û—á–∏—Å—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω–æ–π –ø–∞–ø–∫–∏ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —Ä–∞–±–æ—Ç—ã —Å–µ—Ä–≤–µ—Ä–∞
def cleanup_temp_folder():
    """–û—á–∏—â–∞–µ—Ç –≤—Ä–µ–º–µ–Ω–Ω—É—é –ø–∞–ø–∫—É –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —Ä–∞–±–æ—Ç—ã —Å–µ—Ä–≤–µ—Ä–∞."""
    shutil.rmtree(TEMP_FOLDER, ignore_errors=True)
    logging.info("üßπ –í—Ä–µ–º–µ–Ω–Ω–∞—è –ø–∞–ø–∫–∞ –æ—á–∏—â–µ–Ω–∞")


atexit.register(cleanup_temp_folder)


def convert_to_webp(image_file, output_path):
    """–ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ WebP –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –≤–æ –≤—Ä–µ–º–µ–Ω–Ω–æ–π –ø–∞–ø–∫–µ."""
    start_time = time.time()
    try:
        img = Image.open(image_file)

        if img.size[0] * img.size[1] > MAX_PIXELS:
            img.thumbnail((2048, 2048))
            quality = 75  # –°–Ω–∏–∂–∞–µ–º –∫–∞—á–µ—Å—Ç–≤–æ –ø—Ä–∏ –±–æ–ª—å—à–∏—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è—Ö
            logging.info("‚ö†Ô∏è –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —É–º–µ–Ω—å—à–µ–Ω–æ –¥–ª—è —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è–º")
        else:
            quality = 90

        img.save(output_path, "WEBP", quality=quality)
        elapsed_time = time.time() - start_time
        logging.info(f"‚úÖ –£—Å–ø–µ—à–Ω–∞—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è {image_file.filename} - ‚è± {elapsed_time:.2f} —Å–µ–∫")
        return output_path
    except UnidentifiedImageError:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞: —Ñ–∞–π–ª {image_file.filename} –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º")
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞: {type(e).__name__} - {e}", exc_info=True)
    return None


@app.route("/", methods=["GET", "POST"])
def upload_files():
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–≥—Ä—É–∑–∫—É –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π."""
    try:
        if request.method == "POST":
            files = request.files.getlist("files")
            if not files or all(file.filename == "" for file in files):
                return "–§–∞–π–ª—ã –Ω–µ –≤—ã–±—Ä–∞–Ω—ã", 400

            converted_files = []

            for file in files:
                filename = secure_filename(file.filename)
                file_ext = os.path.splitext(filename)[-1].lower()

                if file_ext not in SUPPORTED_FORMATS:
                    logging.warning(f"‚ö†Ô∏è –§–∞–π–ª {filename} –∏–º–µ–µ—Ç –Ω–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º.")
                    continue

                unique_filename = f"{uuid.uuid4().hex}.webp"
                output_path = os.path.join(TEMP_FOLDER, unique_filename)

                if convert_to_webp(file, output_path):
                    converted_files.append(unique_filename)

            if converted_files:
                return render_template("success.html", files=converted_files)
            else:
                return "–û—à–∏–±–∫–∞ –ø—Ä–∏ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –≤—Å–µ—Ö —Ñ–∞–π–ª–æ–≤", 500

        return render_template("index.html")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–∞–π–ª–æ–≤: {e}", exc_info=True)
        return "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ", 500


@app.route("/download/<filename>")
def download_file(filename):
    """–ü–æ–∑–≤–æ–ª—è–µ—Ç —Å–∫–∞—á–∞—Ç—å –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–∑ –≤—Ä–µ–º–µ–Ω–Ω–æ–π –ø–∞–ø–∫–∏."""
    file_path = os.path.join(TEMP_FOLDER, filename)
    if os.path.exists(file_path):
        logging.info(f"–§–∞–π–ª {filename} —Å–∫–∞—á–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {request.remote_addr}")
        return send_file(file_path, as_attachment=True, download_name=filename, mimetype="image/webp")
    abort(404, "–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω")


if __name__ == "__main__":
    app.run(debug=True)
